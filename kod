import random
import time

def bubble_sort(arr):
    n = len(arr)
    swaps = 0
    for i in range(n - 1):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
                swaps += 1
    return swaps

def insertion_sort(arr):
    n = len(arr)
    swaps = 0
    for i in range(1, n):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
            swaps += 1
        arr[j + 1] = key
    return swaps

def selection_sort(arr):
    n = len(arr)
    swaps = 0
    for i in range(n):
        min_idx = i
        for j in range(i + 1, n):
            if arr[min_idx] > arr[j]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
        swaps += 1
    return swaps

def quick_sort(arr, low, high):
    swaps = 0
    if low < high:
        pi = partition(arr, low, high)
        swaps += quick_sort(arr, low, pi - 1)
        swaps += quick_sort(arr, pi + 1, high)
    return swaps

def partition(arr, low, high):
    i = low - 1
    pivot = arr[high]
    for j in range(low, high):
        if arr[j] <= pivot:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]
    arr[i + 1], arr[high] = arr[high], arr[i + 1]
    return i + 1

def merge_sort(arr):
    swaps = 0
    if len(arr) > 1:
        mid = len(arr) // 2
        L = arr[:mid]
        R = arr[mid:]
        swaps += merge_sort(L)
        swaps += merge_sort(R)
        i = j = k = 0
        while i < len(L) and j < len(R):
            if L[i] <= R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
                swaps += len(L) - i
            k += 1
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1
    return swaps

def shaker_sort(arr):
    n = len(arr)
    swaps = 0
    left = 0
    right = n - 1
    while left < right:
        for i in range(left, right):
            if arr[i] > arr[i + 1]:
                arr[i], arr[i + 1] = arr[i + 1], arr[i]
                swaps += 1
        right -= 1
        for i in range(right, left, -1):
            if arr[i] < arr[i - 1]:
                arr[i], arr[i - 1] = arr[i - 1], arr[i]
                swaps += 1
        left += 1
    return swaps

def get_user_input():
    while True:
        try:
            array_size = int(input("Введите размер массива (1000, 10000, 100000): "))
            if array_size in (1000, 10000, 100000):
                break
            else:
                print("Неверный размер массива. Пожалуйста, введите 1000, 10000 или 100000.")
        except ValueError:
            print("Неверный ввод. Пожалуйста, введите число.")

    while True:
        sort_method = input("Выберите метод сортировки (пузырьковый, Вставкой, Выбором, быстрая, слиянием, шейкерная): ").lower()
        if sort_method in ("пузырьковый", "вставкой", "выбором", "быстрая", "слиянием", "шейкерная"):
            break
        else:
            print("Неверный метод сортировки. Пожалуйста, введите один из следующих вариантов: пузырьковый, Вставкой, Выбором, быстрая, слиянием, шейкерная.")

    return array_size, sort_method

def main():
    array_size, sort_method = get_user_input()
    best_time = float('inf')
    best_swaps = float('inf')
    for i in range(5):
        arr = random.sample(range(array_size * 10), array_size)
        start_time = time.time()
        if sort_method == "пузырьковый":
            swaps = bubble_sort(arr.copy())
        elif sort_method == "вставкой":
            swaps = insertion_sort(arr.copy())
        elif sort_method == "выбором":
            swaps = selection_sort(arr.copy())
        elif sort_method == "быстрая":
            swaps = quick_sort(arr.copy(), 0, len(arr) - 1)
        elif sort_method == "слиянием":
            swaps = merge_sort(arr.copy())
        elif sort_method == "шейкерная":
            swaps = shaker_sort(arr.copy())
        end_time = time.time()
        elapsed_time = end_time - start_time
        if elapsed_time < best_time:
            best_time = elapsed_time
            best_swaps = swaps # Added this line
    print(f"Лучшее время сортировки: {best_time:.6f} секунд")
    print(f"Количество перестановок лучшей попытки: {best_swaps}")
if __name__ == "__main__":
    main()
